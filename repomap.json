{
  "map": "repomap_class.py:\n(Rank value: 0.0635)\n\n  25: class FileReport:\n  34: CACHE_VERSION = 1\n  36: TAGS_CACHE_DIR = f\".repomap.tags.cache.v{CACHE_VERSION}\"\n  37: SQLITE_ERRORS = (sqlite3.OperationalError, sqlite3.DatabaseError)\n  40: Tag = namedtuple(\"Tag\", \"rel_fname fname line name kind\".split())\n  43: class RepoMap:\n  46:     def __init__(\n  96:     def load_tags_cache(self):\n 105:     def save_tags_cache(self):\n 109:     def tags_cache_error(self):\n 120:     def token_count(self, text: str) -> int:\n 148:     def get_rel_fname(self, fname: str) -> str:\n 155:     def get_mtime(self, fname: str) -> Optional[float]:\n 163:     def get_tags(self, fname: str, rel_fname: str) -> List[Tag]:\n 193:     def get_tags_raw(self, fname: str, rel_fname: str) -> List[Tag]:\n 332:     def _regex_fallback(self, code: str, rel_fname: str, fname: str, lang: str) -> List[Tag]:\n 398:     def get_ranked_tags(\n 421:         def normalize_path(path):\n 544:     def render_tree(self, abs_fname: str, rel_fname: str, lois: List[int]) -> str:\n 572:     def to_tree(self, tags: List[Tuple[float, Tag]], chat_rel_fnames: Set[str]) -> str:\n 617:     def get_ranked_tags_map(\n 646:     def get_ranked_tags_map_uncached(\n 670:         def try_tags(num_tags: int) -> Tuple[Optional[str], int]:\n 699:     def _get_source_files_hash(self, all_files: List[str]) -> str:\n 710:     def get_repo_map(\n\nrepomap_server.py:\n(Rank value: 0.0619)\n\n  17: def parse_gitignore(directory: str) -> List[str]:\n  35: def should_exclude_from_gitignore(file_path: str, gitignore_patterns: List[str], root_dir: str) -> bool:\n  59: def find_src_files(directory: str, file_patterns: Optional[List[str]] = None) -> List[str]:\n 121: def is_source_file(filepath: str, file_patterns: Optional[List[str]] = None) -> bool:\n 137: log = logging.getLogger()\n 144: mcp = FastMCP(\"RepoMapServer\")\n 147: async def repo_map(\n 288: async def search_identifiers(\n 383: def main():\n\nutils.py:\n(Rank value: 0.0515)\n\n  18: Tag = namedtuple(\"Tag\", \"rel_fname fname line name kind\".split())\n  21: def count_tokens(text: str, model_name: str = \"gpt-4\") -> int:\n  35: def read_text(filename: str, encoding: str = \"utf-8\", silent: bool = False) -> Optional[str]:\n\nrepomap.py:\n(Rank value: 0.0397)\n\n  23: def find_src_files(directory: str) -> List[str]:\n  41: def tool_output(*messages):\n  46: def tool_warning(message):\n  51: def tool_error(message):\n  56: def main():\n 152:     def token_counter(text: str) -> int:\n\ntests/test_core_functionality.py:\n(Rank value: 0.0256)\n\n  19: log = logging.getLogger(__name__)\n  21: def test_end_to_end_repomap():\n  85: def main():\n\ntests/test_regex_fallback.py:\n(Rank value: 0.0249)\n\n  19: log = logging.getLogger(__name__)\n  21: def test_regex_patterns():\n 143: def test_repo_map_regex():\n 187: def main():\n\ntests/test_final_mcp_verification.py:\n(Rank value: 0.0245)\n\n  15: def test_repo_map_functionality():\n  54: def test_search_identifiers_functionality():\n  82: def main():\n\nscm.py:\n(Rank value: 0.0230)\n\n   8: def get_scm_fname(lang: str) -> Optional[str]:\n\nimportance.py:\n(Rank value: 0.0230)\n\n   8: IMPORTANT_FILENAMES = {\n  27: IMPORTANT_DIR_PATTERNS = {\n  34: def is_important(rel_file_path: str) -> bool:\n  56: def filter_important_files(file_paths: List[str]) -> List[str]:\n\ntests/test_final_verification.py:\n(Rank value: 0.0095)\n\n  13: def test_implementation():\n\ntests/test_gitignore_functionality.py:\n(Rank value: 0.0095)\n\n  12: def test_gitignore_functionality():\n\ntests/test_complete.py:\n(Rank value: 0.0095)\n\n  10: def test_complete_functionality():\n\ntests/test_direct_functionality.py:\n(Rank value: 0.0095)\n\n  13: def test_core_functionality():\n\ntests/test_search.py:\n(Rank value: 0.0095)\n\n   9: def test_search_functionality():\n\ntests/test_mcp.py:\n(Rank value: 0.0095)\n\n  12: def test_mcp_server():\n\ntests/test_direct_mcp_simulation.py:\n(Rank value: 0.0095)\n\n  13: def test_mcp_simulation():\n\ntests/test_mcp_manual.py:\n(Rank value: 0.0095)\n\n  11: def test_mcp_protocol():\n\ntests/test_enhanced_parsing.py:\n(Rank value: 0.0095)\n\n  13: def test_parsing():\n\ntests/test_mcp_functionality.py:\n(Rank value: 0.0095)\n\n  14: async def test_mcp_functionality():",
  "report": {
    "excluded": {},
    "definition_matches": 68,
    "reference_matches": 899,
    "total_files_considered": 79
  }
}